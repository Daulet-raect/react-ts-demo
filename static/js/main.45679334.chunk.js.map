{"version":3,"sources":["Pages/DeletedTodosPage.tsx","Components/Navbar.tsx","Components/TodoForm.tsx","Components/TodoList.tsx","Pages/TodosPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DeletedTodosPage","to","Navbar","className","TodoForm","props","useState","title","setTitle","onKeyPress","event","key","addTodo","placeholder","value","onChange","target","type","data-error","data-success","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","id","checked","join","date","onClick","TodosPage","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","toLocaleString","prev","confirm","filter","App","basename","process","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45679334.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {ITodo} from \"../interfaces\";\r\n\r\nconst DeletedTodosPage: React.FC = () => {\r\n    return (\r\n        <>\r\n            <NavLink to=\"/\"><h1>Back</h1></NavLink>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeletedTodosPage","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\nconst Navbar: React.FC = () => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper teal darken-4\">\r\n                <NavLink to=\"/\" className=\"brand-logo right mr1rem \">React TS Todo List</NavLink>\r\n                <ul className=\"left hide-on-med-and-down\">\r\n                    <li className=\"active\"><NavLink to=\"/\">Todo list</NavLink></li>\r\n                    <li><NavLink to=\"/deleted\">Done</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, {useState} from \"react\";\r\n\r\ninterface TodoFormProps {\r\n    addTodo(title: string): void\r\n}\r\n\r\nconst TodoForm: React.FC<TodoFormProps> = props => {\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const changeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.target.value)\r\n    }\r\n\r\n    const keyPressHandler = (event: React.KeyboardEvent) => {\r\n        if (event.key === \"Enter\") {\r\n            props.addTodo(title)\r\n            setTitle(\"\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col s12\">\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s12\">\r\n                        <input onKeyPress={keyPressHandler}\r\n                               placeholder=\"Todo\" value={title}\r\n                               onChange={changeHandler} type=\"text\"\r\n                               className=\"validate\"/>\r\n                        <span className=\"helper-text\" data-error=\"wrong\" data-success=\"right\">New task</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm","import React from \"react\";\r\nimport {ITodo} from \"../interfaces\";\r\n\r\ntype TodoListProps = {\r\n    todos: ITodo[]\r\n    onRemove(id: number): void\r\n    onToggle(id: number): void\r\n}\r\n\r\nconst TodoList: React.FC<TodoListProps> = ({todos, onRemove, onToggle}) => {\r\n    if (todos.length === 0) {\r\n        return <p className=\"center\">Пока дел нет</p>\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                todos.map(todo => {\r\n                        const classes = [\"todo\", \"mr1rem\"]\r\n                        if (todo.completed) {\r\n                            classes.push(\"completed\")\r\n                        }\r\n\r\n                        return (\r\n                            <p key={todo.id} className=\"pdt1\">\r\n                                <label>\r\n                                    <input onChange={() => onToggle(todo.id)}\r\n                                           type=\"checkbox\" checked={todo.completed}/>\r\n                                    <span className={classes.join(\" \")}>{todo.title}</span>\r\n                                    <span className={classes.join(\" \")}>{todo.date}{}</span>\r\n                                </label>\r\n                                <a className=\"waves-effect waves-dark btn right mr1rem\"\r\n                                   onClick={() => onRemove(todo.id)}>remove</a>\r\n                            </p>\r\n                        )\r\n                    }\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoList","import React, {useEffect, useState} from \"react\";\r\nimport TodoForm from \"../Components/TodoForm\";\r\nimport TodoList from \"../Components/TodoList\";\r\nimport {ITodo} from \"../interfaces\";\r\ndeclare var confirm: (question: string) => boolean\r\n\r\nconst TodosPage: React.FC = () => {\r\n    const [todos, setTodos] = useState<ITodo[]>([])\r\n\r\n    useEffect(() => {\r\n        const saved = JSON.parse(localStorage.getItem(\"todos\") || \"[]\") as ITodo[]\r\n        setTodos(saved)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(todos))\r\n    }, [todos])\r\n\r\n    const addTodoHandler = (title: string) => {\r\n        const newTodo: ITodo = {\r\n            title,\r\n            id: Date.now(),\r\n            date: new Date().toLocaleString(),\r\n            completed: false\r\n        }\r\n        //делать изменения на основе старых данных правильнее\r\n        setTodos(prev => [newTodo, ...prev])\r\n    }\r\n\r\n    const toggleHandler = (id: number) => {\r\n        setTodos(prev => prev.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        completed: !todo.completed\r\n                    }\r\n                }\r\n                return todo\r\n            })\r\n        )\r\n    }\r\n\r\n    const removeHandler = (id: number) => {\r\n        if (confirm(\"вы точно хотите удалить задачу?\")) {\r\n            setTodos(prev => prev.filter(todo => todo.id !== id) )\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <TodoForm addTodo={addTodoHandler}/>\r\n            <TodoList onRemove={removeHandler} onToggle={toggleHandler} todos={todos}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodosPage","import React from 'react';\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport DeletedTodosPage from \"./Pages/DeletedTodosPage\";\nimport Navbar from \"./Components/Navbar\";\nimport TodosPage from \"./Pages/TodosPage\";\n//обявляем глобальный метод и задаем тип его данным // window.confirm - выводит предупреждение\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Navbar/>\n            <Route path=\"/\" exact component={() => <TodosPage />}/>\n            <Route path=\"/deleted\" component={() => <DeletedTodosPage />}/>\n        </BrowserRouter>\n    )\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}